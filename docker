DOCKER:It is used to deploy applications easy 
-------
Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, andship it all out as one package.

DOCKRER TERMINOLOGIES:

IMAGE:It is a metadata of an os.It cant have memory it just have storage space

CONTAINER:When the image gets executes it has its own running space and all the features of the application.Each container has its own isolated area

----------------     DOCKER IS WRITTEN IN GO LANGUAGE      -------------------
------------------------------------
TO INSTALL DOCKER ON UBUNTU 16.04
------------------------------------
1.First, in order to ensure the downloads are valid, add the GPG key for the official Docker repository to your system:

$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

2.Add the Docker repository to APT sources:

$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

3.Next, update the package database with the Docker packages from the newly added repo:

$ sudo apt-get update

4.Make sure you are about to install from the Docker repo instead of the default Ubuntu 16.04 repo:

$ apt-cache policy docker-ce

5.Finally, install Docker:
$sudo apt-get install -y docker-ce

6.Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it's running:

$ sudo systemctl status docker

----------------------------------------OR THROUGH SCRIPT-------------------------------------------------------------------
$ curl -fsSL get.docker.com -o get-docker.sh
$ sh get-docker.sh
----------------------------------------------------------------------------------------------------------------------------
1.To see the docker version
$ docker --version

2.Any help from docker
$ docker --help

3.To pull any image from docker hub
$ docker pull image-name

4.To run the image
$ docker run image-name

5.To see the list of images in local repo
$ docker images
--------------------------------------------------------------
NOTE:If u want to download the image just give "docker pull image-name.If u want to run the image give"docker run image".If u run the image first it check from the local deamon if not there it checks from the docker hub and executes.docker run image means pull+executes.

1.docker--Client
2.docker deamon-service
3.registry-docker hub
--------------------------------------------------------------
6.To see the running containers
$ docker ps

7.T see the history of cantainers
$ docker ps -a

8.To spinup the container without pulling from dockerhub
$ docker run -it centos "bin/bash"

9.to remove the multiple container at a time
$ docker rm $(docker rm -a -q)

10.to be in attach mode(when u come out of the promt jenkins stop working)attach mode
$ docker run -p 8081:8080 jenkins

11.docker -d -p 8081:8080 jenkins
attach mode--when u come out of the prompt still jenkins will run in browser

12.To get into container
$ docker exec -it conatiner-name /bin/bash

13.to perform linux commands without getting into container 
$ docker exec container-id ls/ pwd
------------------------------------------------------------------------
WHAT CONTAINER DOES?
It will create a user space which is isolated to launch an application
------------------------------------------------------------------------
1.Isolation:It is done beacause of the linux kernel concept called namespace(pid namespace,user namespace,net namespace)
2.control groups:These are useful to control the process
example if u run a containee in a docker and run application on top of that for suppose if its ram is 512mb and if u want to increase to 2gb then the cgropus will help 
3.what permission u would give to process--capabilities
exaple if u want ur process to control the network of ur system certain capabilities are used like CAP_NET_BIND_SERVICE
4.libconatiner:if ur running docker on linux ubuntu if the kernel gets updated docker may run maynot run u cant garuntee so to avoid this problem lib container comes where it speaks to kernel makes changes
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TAG:It is nothing but a version of ur image---docker run -p 80:80 nginx:1.12
----------------------------------------------------------------------------
14.to stop conatiner-id or name
$ docker stop id

15.To start the container 
$ docker start id or anme

16.to know abou the container info
$ docker inspect container-id

17.docker run -d -p 8080:80 nginx:1.12(tag)
tag means versioning of an image

18.docker build is creating a image out of docker file

19.docker build -t apache2:1.0 .(-t is tag you want to give to the image . is present directory where u want to build)

---------------------------------------------------------------------------------------------
DOCKER FILE COMMANDS
---------------------
Below are some dockerfile commands you must know:

FROM
The base image for building a new image. This command must be on top of the
dockerfile.

MAINTAINER
Optional, contains the name of the maintainer of the image..
RUN
Used to execute a command during the build process of the docker image.

ADD
Copy a file from the host machine to the new docker image. There is an option to use
an URL for the file, docker will then download that file to the destination directory.

ENV
Define an environment variable.

CMD
Used for executing commands when we build a new container from the docker
image.

ENTRYPOINT
Define the default command that will be executed when the container is running.

WORKDIR
This is directive for CMD command to be executed.

USER
Set the user or UID for the container created with the image.

VOLUME
Enable access/linked directory between the container and the host machine.
----------------------------------------------------------------------------------------------
20.after buildingyou have to run to spinup the container
$ docker run apache2:1.0
---------------------------------------------------
SAMPLE DOCKER FILE:
FROM ubuntu:14.04
MAINTAINER javed
RUN apt-get update && apt-get install apache2 -y
CMD ping google.com

docker buld -t apache2:1.0 .
docker run apache2:1.0
docke run -d apache2:1.0 (dettach mode)
docker run  apache2:1.0 echo helloworld(what ever the cmd u write after the image name it will replace cmd in docker file with the cmd u give here)
docker run apache2:1.0 ping yahoo.com
docker run -d apache2:1.0 ping yahoo.com (after image what ever you give it will be replaced by CMD)
To see yahoo is pinging or not:docker logs container -id

FROM ubuntu:14.04
MAINTAINER javed
RUN apt-get update && apt-get install apache2 -y
ENTRYPOINT ["ping"]
CMD [" yahoo.com"]

cmd is argument to entry point 
example:docker run apache:1.0 google.com(it will replace after image and take an argument from entry point and gives the result)
---------------------------------------------------------------------------------------------------------------------------------------
FROM tomcat:7
MAINTAINER javeed.abdul9@gmail.com
EVV #to set environment variables
COPY jenkins.war /usr/local/webapps
EXPOSE 8080
CMD ["CATALINA.SH","RUN"]
----------------------------------------------------------------------
----------------------------------------------------------------------
ADD:It can download from internet by using url
COPY:file should be present in a local machine
-------------------------------------------------
NOTE:Layers are uesd for reusability by other container through netywork file storage
example RUN apt-get update
		RUN apt-get install java 1.8* -yahoo
		RUN apt-get install tree
		.........
These are all the layers
---------------------------------------------------------------------
WHAT IF CONTAINER FAILS?DTA IS LOST?
1.Data is still lost persitant data is present in local machine
2.Persitsnt storage:data is present even after the container is killed
3.to have a persistant storage you should use a volume concept where u should give mounting point
4.docker pull ubuntu:14.04
5.docker run -it -v /mymount ubuntu:14.04 /bin/bash
6.df -has
7.cd mymount
8.touch file.txt
9.to know where the data is present in physical machine
10.docker inspect container-id,see volume module,copy the source path.PATH IS A DEFAULT PATH
11.come out of the container 
12.cd source path ls
13.you can see the file.txt file.if u create any file or directory it will apply in a container
14.docker volume ls
15.docker volume >> where u can perform volume commands

TO GIVE THE PARTICULAT PATHE TO MOUNT WHILE RUNNING CONTAINER
--------------------------------------------------------------
1.docker run -it /home/ubuntu(path):/jenkins(mount point) ubuntu:14.04 /bin/bash
2.dccker inspect id(source path will be /home/ubuntu)
3.if u create anything in mount point it will be present in /home/ubuntu path in aphysical machine
4.perform this action in two caontainer or more caontainers
-----------------------------------------------------------------------------------------------------
DOCKER NETWORKING
------------------
1.cnm(container network module):designed document
2.libnetwork:it is implementation of cnm
3.driver:to support multiple network
4.docker network ls
5.bridge drive r is default in linux
6.nat in windows
-------------------------------------------
To communicat two containers:
1.create two containers
2.get into the container 1
3.ping ip-address(container2)  conatiner2 name
-----------------------------------------------------
Networks scope are of two types:
1.SWARN:MULTIPLEHOST
2.LOCAL :SINGLE HOST
----------------------------------------------------
TO CREATE A CUSTOM NETWORK
1.docker network create -d bridge --subnet 1.1.0.0/24
JV-brige
2.to create a conatiner in acustom network
3.docker run -dt --name c1 --network jv-bridge ubuntu:14.04
4.docker run -dt --name c1 --network jv-bridge ubuntu:14.04
5.dockr inspect jv-bridge
6.docker ecex -it c1 /bin/bash
7.ping c2
8.can ping with name

